(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-dev-runtime"] = global["jsx-dev-runtime"] || {}, global["jsx-dev-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	/**
	 * 创建一个全局的唯一的react.element元素，如果不支持symbol方法，则用一个特定的整数替代
	 * 目的是创建一个用于标识 React 元素类型的唯一标识符，以确保在不同环境中 React 元素的唯一性和一致性。
	 * 使用 Symbol 类型可以更好地保证标识符的唯一性和不可变性，
	 * 但为了兼容不支持 Symbol 的环境，也提供了一个整数值的备选方案。
	 */
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __author: 'Joz: zzc5464@foxmail.com'
	    };
	    return element;
	};
	const jsx = (type, config, ...childrens) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key' && val !== undefined) {
	            key = '' + val;
	            continue;
	        }
	        if (prop === 'ref' && val !== undefined) {
	            ref = val;
	        }
	        if (Object.prototype.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    if (childrens.length) {
	        if (childrens.length === 1) {
	            props.children = childrens[0];
	        }
	        props.children = childrens;
	    }
	    return ReactElement(type, key, ref, props);
	};
	const jsxDEV = (type, config) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key' && val !== undefined) {
	            key = '' + val;
	            continue;
	        }
	        if (prop === 'ref' && val !== undefined) {
	            ref = val;
	        }
	        if (Object.prototype.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	exports.jsx = jsx;
	exports.jsxDEV = jsxDEV;

}));
